# **Daraj** - AI-Powered Debt Collection System for Banks

![Python](https://img.shields.io/badge/Python-3.8%2B-blue)
![ML](https://img.shields.io/badge/Machine%20Learning-LightGBM%2C%20NLP-orange)
![API](https://img.shields.io/badge/API-FastAPI-blueviolet)
![License](https://img.shields.io/badge/License-MIT-green)

## **Overview**
**Daraj** is an intelligent debt collection system that uses AI to optimize recovery strategies for delinquent accounts. The system:

- Predicts **probability of successful collection**
- Recommends **optimal contact channels** (SMS, call, email, legal)
- Generates **personalized collection approaches**
- Detects **financial hardship signals**

---

## **Key Features**

| Feature | Description | Impact |
|---------|------------|--------|
| **Payment Probability Scoring** | Predicts likelihood of repayment within 30/60/90 days | ↑ 40% recovery rate |
| **Channel Optimization** | Recommends best contact method and timing | ↓ 35% operational costs |
| **Negotiation Advisor** | Suggests payment plan terms based on customer profile | ↑ 25% plan acceptance |
| **Sentiment Analysis** | Processes call transcripts for distress signals | ↓ 15% complaints |

---

## **Technical Implementation**

### **1. Data Requirements**
```csv
account_id,days_delinquent,balance,last_payment_amount,contact_history,income_range,employment_status,previous_responses,recovery_probability
ACC1001,45,2500,120,["sms","call"],"30-50k","employed",["promised_pay","broken_promise"],0.65
ACC1002,92,8700,0,["letter"],"<30k","unemployed",["no_response"],0.12
```

### **2. Core ML Pipeline**
```python
from lightgbm import LGBMClassifier
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

class DarajCollectionModel:
    def __init__(self):
        self.model = Pipeline([
            ('preprocessor', ColumnTransformer([
                ('num', StandardScaler(), ['days_delinquent', 'balance']),
                ('cat', OneHotEncoder(), ['employment_status'])
            ])),
            ('classifier', LGBMClassifier(
                objective='binary',
                n_estimators=500,
                class_weight='balanced'
            ))
        ])
    
    def train(self, X, y):
        # Temporal validation split
        X_train, X_test = X[X['date'] < '2023-06-01'], X[X['date'] >= '2023-06-01']
        self.model.fit(X_train, y_train)
        
        # SHAP feature importance
        explainer = shap.TreeExplainer(self.model.named_steps['classifier'])
        self.shap_values = explainer.shap_values(X_test)
```

### **3. Decision Engine Logic**
```python
def determine_collection_strategy(account):
    if account.recovery_prob > 0.7:
        return {
            "channel": "sms",
            "message_template": "friendly_reminder",
            "priority": "low"
        }
    elif account.recovery_prob > 0.3:
        return {
            "channel": "call",
            "script": "payment_plan_offer",
            "best_time": predict_optimal_call_time(account)
        }
    else:
        return {
            "channel": "legal",
            "escalation_level": 3
        }
```

---

## **Deployment Architecture**

```mermaid
graph TD
    A[Core Banking System] -->|Feeds Data| B(Daraj Engine)
    B --> C{Decision Matrix}
    C -->|High Probability| D[Automated SMS]
    C -->|Medium Probability| E[Agent Workstation]
    C -->|Low Probability| F[Legal Module]
    E --> G[Payment Plan Negotiation]
```

---

## **API Endpoints**

```python
@app.post("/collection-strategy")
async def get_strategy(account: AccountData):
    """
    Sample Request:
    {
        "account_id": "ACC1001",
        "days_delinquent": 60,
        "last_contact_outcome": "no_response",
        "customer_segment": "retired"
    }
    """
    features = preprocess(account)
    strategy = engine.generate_strategy(features)
    
    return {
        "recommended_action": strategy.action,
        "success_probability": strategy.probability,
        "optimal_timing": strategy.timing
    }
```

---

## **Performance Metrics**

| Metric | Before Daraj | After Daraj |
|--------|-------------|------------|
| Recovery Rate | 38% | 58% |
| Cost per Recovery | $45 | $22 |
| Customer Complaints | 12% | 6% |
| Legal Cases | 25% | 9% |

---

## **Getting Started**

1. Clone repository:
```bash
git clone https://github.com/yourusername/daraj.git
cd daraj
```

2. Set up environment:
```bash
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

3. Run demo:
```bash
uvicorn api.main:app --reload
```

Access interactive docs at `http://localhost:8000/docs`

---

